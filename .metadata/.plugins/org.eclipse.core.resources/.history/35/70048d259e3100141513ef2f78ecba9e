package anastasoft.rallyvision.controller;

import java.sql.Date;

import anastasoft.rallyvision.R;
import anastasoft.rallyvision.BTManager.BTManager;
import anastasoft.rallyvision.activity.DeviceListActivity;
import anastasoft.rallyvision.activity.MenuPrincipal;
import android.app.Activity;
import android.app.Application;
import android.bluetooth.BluetoothAdapter;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

public class Controller extends Application {
	
	BTManager aBTManager;
	
	private static final boolean D = true;
	private static final String TAG = "Controller";
	
	// Counter and Converter intelligence
	
	private volatile CounterAndConverter aCountConv;
	// Current Activity
	
	private Activity currentAct;
	
	// aplication state
	
	private static boolean FIRST_RUN = true;
	
	// Intent request codes
	private static final int REQUEST_CONNECT_DEVICE = 1;
	private static final int REQUEST_ENABLE_BT = 2;
	
	// Key names received from the BluetoothChatService Handler
	public static final String DEVICE_NAME = "device_name";
	public static final String TOAST = "toast";
	public static final String TIME = "time";
	
	// Name of the connected device
	private String mConnectedDeviceName = null;
	
	// Message types sent from the BluetoothChatService Handler
	public static final int MESSAGE_STATE_CHANGE = 1;
	public static final int MESSAGE_READ = 2;
	public static final int MESSAGE_WRITE = 3;
	public static final int MESSAGE_DEVICE_NAME = 4;
	public static final int MESSAGE_TOAST = 5;
	public static final int MESSAGE_TIME = 6;
	
	// Resources
	
	private static Resources aResource;
	
	// Preferences
	
	private static String RATIO = "example_ratio";
	
	private static PreferencesAdapter aPrefAdapter;
	
	// Contain all values that change
	
	private static Observable aObervable;
	
	private final Handler mHandler = new Handler() {
		
		long deltaT;
		int i;
		
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
				case MESSAGE_STATE_CHANGE:
					if (D)
						Log.i(TAG, "MESSAGE_STATE_CHANGE: " + msg.arg1);
					switch (msg.arg1) {
						case BTManager.STATE_CONNECTED:
							if (D)
								Log.e(TAG, " +++ STATE_CONNECTED +++");
							startCommunication();
							
							break;
						case BTManager.STATE_CONNECTING:
							if (D)
								Log.e(TAG, " +++ STATE_CONNECTING +++");
							break;
						case BTManager.STATE_LISTEN:
							if (D)
								Log.e(TAG, " +++ STATE_LISTEN +++");
							break;
						case BTManager.STATE_NONE:
							if (D)
								Log.e(TAG, " +++ STATE_NONE +++");
							break;
					}
					break;
				case MESSAGE_WRITE:
					if (D)
						Log.e(TAG, " +++ MESSAGE_WRITE +++");
					byte[] writeBuf = (byte[]) msg.obj;
					// construct
					// a
					// string
					// from
					// the
					// buffer
					String writeMessage = new String(writeBuf);
					
					break;
				case MESSAGE_READ:
					if (D)
						Log.e(TAG, " +++ MESSAGE_READ +++");
					
					byte[] readBuf = (byte[]) msg.obj;
					// construct
					// a
					// string
					// from
					// the
					// valid
					// bytes
					// in
					// the
					// buffer
					
					try {
						// String readMessage = new String(readBuf, 0,
						// msg.arg1);
						deltaT = msg.getData().getLong(TIME);
						
						// just one byte is sent... that's why the 0 index is
						// constant
						i = (readBuf[0] & 0xff);
						aCountConv.update(i, deltaT);
					} catch (Exception e) {
						
					}
					
					break;
				case MESSAGE_DEVICE_NAME:
					if (D)
						Log.e(TAG, " +++ MESSAGE_DEVICE_NAME +++");
					// save
					// the
					// connected
					// device's
					// name
					mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
					Toast.makeText(
							getApplicationContext(),
							aResource.getString(R.string.message_connected_to)
									+ mConnectedDeviceName, Toast.LENGTH_SHORT)
							.show();
					break;
				case MESSAGE_TOAST:
					if (D)
						Log.e(TAG, " +++ MESSAGE_TOAST +++");
					Toast.makeText(getApplicationContext(),
							msg.getData().getString(TOAST), Toast.LENGTH_SHORT)
							.show();
					break;
			}
		}
	};
	
	private SharedPreferences preferences;
	
	private int toInt(byte[] data, int length) {
		int res = 0x0;
		// if (data == null || data.length != 4) return 0x0;
		// ----------
		
		if (length > 3) {
			res = (0xff & data[3]) << 0;
		}
		if (length > 2) {
			res = res | (0xff & data[2]) << (8 * (length - 2) - 1);
		}
		
		if (length > 1) {
			res = res | (0xff & data[1]) << (8 * (length - 1) - 1);
		}
		
		if (length > 0) {
			res = res | ((0xff & data[0]) << (8 * (length - 0) - 1));
		}
		
		return res;
		
		// return (int)( // NOTE: type cast not necessary for int
		// (0xff & data[0]) << 24 |
		// (0xff & data[1]) << 16 |
		// (0xff & data[2]) << 8 |
		// (0xff & data[3]) << 0
		// );
	}
	
	public void startCommunication() {
		if (aCountConv == null) {
			
			aCountConv = new CounterAndConverter(this, aObervable);
		}
		
		// if (isRatioDefault(aObervable.getRatio())){
		// if(currentAct.getClass() == MenuPrincipal.class){
		// ((MenuPrincipal)currentAct).warnNotCalibrated();
		// }
		// }
		
		try {
			if (aCountConv.isAlive()) {
				aCountConv.resetState();
				
			}
			aCountConv.start();
			if (D)
				Log.e(TAG, " +++ START +++");
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	
	public void setup(Activity currentAct) {
		if (D)
			Log.e(TAG, "+++ setup  +++");
		aResource = getResources();
		this.currentAct = currentAct;
		
		aObervable = new Observable();
		aPrefAdapter = new PreferencesAdapter(this, aObervable);
		
		aObervable.Attach(aPrefAdapter);
		
		aBTManager = new BTManager(this, mHandler);
		aBTManager.setupBT();
		
		// If the adapter is null, then Bluetooth is not supported
//		if (!aBTManager.hasBTDevide()) {
//			Toast.makeText(this,
//					aResource.getString(R.string.message_device_has_no_BT),
//					Toast.LENGTH_LONG).show();
//			currentAct.finish();
//			return;
//		}
//		
		// setting the Ratio
		float ratio = aPrefAdapter.getRatio();
		aObervable.setRatio(ratio);
		
		// setup Count and Converter
		aCountConv = new CounterAndConverter(this, aObervable);
		aObervable.Attach(aCountConv);
		
		// setup Menu Principal
		MenuPrincipal mp = (MenuPrincipal) currentAct;
		mp.setObservable(aObervable);
		
		
		
		FIRST_RUN = false;
		
	}
	
	private boolean isRatioDefault(float ratio2) {
		// TODO Auto-generated method stub
		if (aObervable.getRatio() == (float) 1.0) {
			return true;
		} else {
			return false;
		}
	}
	
	public void resetRatio() {
		aObervable.setRatio(Float.parseFloat(aResource
				.getString(R.string.pref_default_ratio_number)));
	}
	
	public void resetGeral() {
		resetRatio();
		zerar();
	}
	
	public void setOdometer(int value) {
		aObervable.setOdometer(value);
	}
	
	public void zerar() {
		aCountConv.zerar();
	}
	
	public void enableBT(Activity currentAct) {
		this.currentAct = currentAct;
		if (D)
			Log.e(TAG, "++ enableBT ++");
		
		// If BT is not on, request that it be enabled.
		// setupChat() will then be called during onActivityResult
		
		if (!aBTManager.isBTEnabled()) {
			Intent enableIntent = new Intent(
					BluetoothAdapter.ACTION_REQUEST_ENABLE);
			this.currentAct.startActivityForResult(enableIntent,
					REQUEST_ENABLE_BT);
			// Otherwise, setup the chat session
		}
	}
	
	protected void query() {
		if (D)
			Log.e(TAG, " +++ QUERY +++");
		String message = "Q";
		// Check that we're actually connected before trying anything
		if (aBTManager.getState() != BTManager.STATE_CONNECTED) {
			Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT)
					.show();
			if (D)
				Log.e(TAG, " +++ NOT_CONNECTED +++");
			return;
		}
		
		byte[] send = message.getBytes();
		aBTManager.write(send);
		
	}
	
	public void startExecution(Activity currentActivity) {
		if (D)
			Log.e(TAG, "++ scanDevices ++");
		this.currentAct = currentActivity;
		
		if (!aBTManager.isBTEnabled()) {
			
			enableBT(currentAct);
			return;
		}
		
		Intent serverIntent = new Intent(currentAct, DeviceListActivity.class);
		currentAct.startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);
	}
	
	public Activity getCurrentActiviy() {
		return currentAct;
	}
	
	public void actionAfterBlueTooth(int requestCode, int resultCode,
			Intent data) {
		
		if (D)
			Log.d(TAG, "actionAfterBlueTooth" + resultCode);
		switch (requestCode) {
			case REQUEST_CONNECT_DEVICE:
				// When DeviceListActivity returns with a device to connect
				if (resultCode == Activity.RESULT_OK) {
					
					// Get the device MAC address
					String address = data.getExtras().getString(
							DeviceListActivity.EXTRA_DEVICE_ADDRESS);
					aBTManager.connectToDeviceWith(address);
				}
				break;
			case REQUEST_ENABLE_BT:
				// When the request to enable Bluetooth returns
				if (resultCode == Activity.RESULT_OK) {
					// Bluetooth is now enabled, so set up a chat session
					startExecution(currentAct);
				} else {
					// User did not enable Bluetooth or an error occured
					Log.d(TAG, "BT not enabled");
					Toast.makeText(this, R.string.title_BT_not_connected,
							Toast.LENGTH_SHORT).show();
					
				}
		}
	}
	
	public void setupOdometro() {
		
	}
	
	public void setRatio(float ratio) {
		Toast.makeText(currentAct, String.valueOf(ratio), Toast.LENGTH_SHORT)
				.show();
		aObervable.setRatio(ratio);
		
	}
	
	public void stopCommunication() {
		// Stop the Bluetooth chat services
		if (aBTManager != null)
			aBTManager.stop();
		if (D)
			Log.e(TAG, "--- stopCommunication ---");
		if (aCountConv != null)
			aCountConv.cancel();
		aCountConv = null;
	}
	
	public class CounterAndConverter extends Thread {
		
		protected String TAG = "CounterAndConverter";
		protected int STATE;
		protected static final int STATE_WAITING = 1;
		protected static final int STATE_READY = 2;
		protected static final int STATE_STOPPED = 3;
		
		private VelocityEng aVelEng;
		
		float ratio;
		int distance;
		
		Controller aController;
		
		private Observable aObservable;
		
		public CounterAndConverter(Controller ac, Observable aObservable) {
			
			aController = ac;
			
			this.aObservable = aObservable;
			
			ratio = aObervable.getRatio();
			aVelEng = new VelocityEng(ratio);
			
			// TODO Auto-generated constructor stub
		}
		
		public void setOdometer(int value) {
			// TODO Auto-generated method stub
			aVelEng.setDeltaSTotal(value);
		}
		
		public void resetState() {
			if (D)
				Log.e(TAG, " +++ RESET_STATE +++");
			this.STATE = STATE_READY;
		}
		
		@Override
		public void run() {
			STATE = STATE_READY;
			aVelEng.setValues(aObservable.getValues());
			while (STATE != STATE_STOPPED) {
				switch (STATE) {
					case STATE_READY:
						if (D)
							Log.e(TAG, " +++ STATE_QUERY +++");
						aController.query();
						STATE = STATE_WAITING;
						
						break;
					case STATE_WAITING:
						
						break;
					
					default:
						break;
				
				}
			}
			
		}
		
		protected void update(int newPulse) {
			
			aVelEng.updateEnd(newPulse,
					(new Date(System.currentTimeMillis())).getTime());
			
			// are this both synchronous?
			aObservable.setValues(aVelEng.getValues(), this);
			
			STATE = STATE_READY;
			
		}
		
		protected void update(int newPulse, long deltaT) {
			
			aVelEng.updateEnd(newPulse, deltaT);
			
			// are this both synchronous?
			aObservable.setValues(aVelEng.getValues(), this);
			
			STATE = STATE_READY;
		}
		
		protected void cancel() {
			STATE = STATE_STOPPED;
		}
		
		public void update() {
			aVelEng.setValues(aObervable.getValues());
		}
		
		protected void setRatio(float ratio) {
			aVelEng.setRatio(ratio);
		}
		
		public void zerar() {
			aVelEng.zerar();
			aObservable.setValues(aVelEng.getValues(), this);
			
		}
		
	}
	
	public void configureRatio(int deltaSAfericao) {
		if (D)
			Log.e(TAG, " +++ configureRatio +++");
		// TODO Auto-generated method stub
		
		try {
			float deltaSSistema;
			float ratioTemp;
			float ratioSis;
			
			// retrieving deltaS sistem
			deltaSSistema = aObervable.getValues().get(0);
			
			// retrieving ratio sistem
			ratioSis = aObervable.getValues().get(3);
			
			// temp Ratio
			ratioTemp = deltaSAfericao / deltaSSistema;
			
			// math
			
			ratioSis = ratioSis * ratioTemp;
			
			aObervable.setRatio(ratioSis);
			aCountConv.zerar();
		} catch (ArithmeticException e) {
			Toast.makeText(getApplicationContext(),
					aResource.getString(R.string.config_ratio_zero),
					Toast.LENGTH_LONG).show();
		}
		
	}
	
}